<?php

namespace Sigmalab\Database\Storage;

use Sigmalab\Database\Core\DBColumnDefinition;
use Sigmalab\Database\Core\DBObject;
use Sigmalab\Database\Core\IDataObject;
use Sigmalab\Database\Sql\SQLStatementInsert;
use Sigmalab\Database\Sql\SQLStatementSelect;
use Sigmalab\Database\Sql\SQLStatementUpdate;

/**
 * Class CompositeStorage
 *
 *  CRUDL Adapter
 *
 * CREATE: Object with details must be stored in database.
 * READ: MUST be only ONE SELECT statement with joins but in object MUST be hierarchy.
 * UPDATE: Object with details must be stored in database.
 * LIST: MUST be only ONE SELECT statement with joins WITHOUT hierarchy.
 * DELETE: Object with details must be deleted from database.
 *
 * Case 1:  List of objects: only several fields required.
 * Case 2:  Create/Read/Update object: we works with full object hierarchy. required all fields of details.
 */
class CompositeStorage extends ExtendedObjectsStorage
{
	public function __construct(IStatementRunner $runner, DBObject $proto, $protoParent = null)
	{
		parent::__construct($runner, $proto, $protoParent); // TODO: Change the autogenerated stub
	}


	/**
	 * @param IDataObject $obj
	 * @param IDataObject|null $root
	 * @return int
	 */
	public function insert(IDataObject $obj, ?IDataObject $root = null): int
	{
		$rc = parent::insert($obj);


		if (!method_exists($obj, 'members')) {
			return $rc;
		}
		/** @var $member DBObject */
		foreach ($obj->members() as $member) {
			$member->set_parent_key_value($obj->get_parent_key_value());
			$member->set_primary_key_value($this->database()->execute(new SQLStatementInsert($member)));
		}
		return $rc;
	}

	public function update(DBObject $object)
	{
		parent::update($object); // TODO: Change the autogenerated stub

		/** @var $member DBObject|IDBCompositeObject */
		foreach ($object->members() as $member) {
			if (!$member->isChanged()) {
				continue;
			}

			$this->database()->execute(new SQLStatementUpdate($member));
			$member->discardChangedState();
		}
	}


	/**
	 * @return SQLStatementSelect
	 */
	public function stmSelect()
	{
		$stm = parent::stmSelect();

		/** @var $member DBObject */
		foreach ($this->proto()->members() as $member) {
			$stm->addJoinByKey($member->getParentKey());

			foreach ($member->getColumnDefinition() as $tag) {
				$stm->addColumn($tag);
			}
		}
		return $stm;
	}

	public function assignMemberFields(DBObject $object)
	{
		/** @var $member DBObject */
		foreach ($object as $member) {
			if (!($member instanceof DBObject)) {
				continue;
			}
			$ignore = $member->getParentKey()->ownerTag()->getName();

			/** @var $tag DBColumnDefinition */
			foreach ($member->getColumnDefinition() as $tag) {
				$name = $tag->getName();
				if (!isset($object->$name)) {
					continue;
				}

				$member->$name = $object->$name;

				if ($ignore == $name) {
					continue;
				}
				unset($object->$name);
			}
		}
	}


}
